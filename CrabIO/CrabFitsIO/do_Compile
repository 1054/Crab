#!/bin/bash
# 

Compiler_bin="g++"

if [[ $(uname) == "Darwin" ]]; then
    Compiler_bin="clang++"
fi

Suffix_str=""

if [[ $(uname) == "Darwin" ]]; then
    Suffix_str="mac_"$(date +"%Y%m%d")
else
    Suffix_str="linux_"$(uname -m)"_ldd_"$(ldd --version | head -n 1 | sed -e 's/[^0-9.]//g' | sed -e 's/\./_/g')"_v"$(date +"%Y%m%d")
fi

echo "Compiler_bin = ${Compiler_bin}"
echo "Suffix_str = ${Suffix_str}"
#exit

List_dirs=( "CrabFitsHeader" \
            "CrabFitsImageArithmetic" \
            "CrabFitsImageCopy" \
            "CrabFitsImageCrop" \
          )

for List_dir in "${List_dirs[@]}"; do
    cd "${List_dir}/"
    if [[ $(uname) == "Linux" ]] || [[ $(uname) == "Darwin" ]]; then
        echo "$Compiler_bin ../CrabFitsIO.cpp main.cpp -o \"${List_dir}_${Suffix_str}\""
        $Compiler_bin ../CrabFitsIO.cpp main.cpp -o "${List_dir}_${Suffix_str}"
    fi
    cd "../"
done

if [[ 1 -eq 1 ]]; then
    cd "CrabFitsImageFromGildasMapping/"
    cp ../CrabFitsIO.h .
    cp ../CrabFitsIO.cpp .
    if [[ $(uname) == "Linux" ]] || [[ $(uname) == "Darwin" ]]; then
        echo "$Compiler_bin CrabFitsIO.cpp pdbi-lmv-to-fits.cpp -o \"pdbi-lmv-to-fits-${Suffix_str}\""
              $Compiler_bin CrabFitsIO.cpp pdbi-lmv-to-fits.cpp -o "pdbi-lmv-to-fits-${Suffix_str}" # actually, this can be done with GILDAS/MAPPING task: "FITS XXX.fits FROM XXX.lmv /STYLE CASA"
        echo "$Compiler_bin CrabFitsIO.cpp pdbi-uvt-to-fits.cpp -o \"pdbi-uvt-to-fits-${Suffix_str}\""
              $Compiler_bin CrabFitsIO.cpp pdbi-uvt-to-fits.cpp -o "pdbi-uvt-to-fits-${Suffix_str}" # actually, this can be done with GILDAS/MAPPING task: "FITS XXX.fits FROM XXX.uvt /STYLE CASA"
    fi
    cd "../"
fi

if [[ 1 -eq 1 ]]; then
    cd "CrabFitsNumber2Bytes/"
    if [[ $(uname) == "Linux" ]] || [[ $(uname) == "Darwin" ]]; then
        echo "$Compiler_bin CrabFitsInt2Bytes.cpp    -o \"CrabFitsInt2Bytes_${Suffix_str}\""
              $Compiler_bin CrabFitsInt2Bytes.cpp    -o "CrabFitsInt2Bytes_${Suffix_str}"
        echo "$Compiler_bin CrabFitsFloat2Bytes.cpp  -o \"CrabFitsFloat2Bytes_${Suffix_str}\""
              $Compiler_bin CrabFitsFloat2Bytes.cpp  -o "CrabFitsFloat2Bytes_${Suffix_str}"
        echo "$Compiler_bin CrabFitsDouble2Bytes.cpp -o \"CrabFitsDouble2Bytes_${Suffix_str}\""
              $Compiler_bin CrabFitsDouble2Bytes.cpp -o "CrabFitsDouble2Bytes_${Suffix_str}"
        echo "$Compiler_bin CrabFitsBytes2Int.cpp    -o \"CrabFitsBytes2Int_${Suffix_str}\""
              $Compiler_bin CrabFitsBytes2Int.cpp    -o "CrabFitsBytes2Int_${Suffix_str}"
        echo "$Compiler_bin CrabFitsBytes2Float.cpp  -o \"CrabFitsBytes2Float_${Suffix_str}\""
              $Compiler_bin CrabFitsBytes2Float.cpp  -o "CrabFitsBytes2Float_${Suffix_str}"
        echo "$Compiler_bin CrabFitsBytes2Double.cpp -o \"CrabFitsBytes2Double_${Suffix_str}\""
              $Compiler_bin CrabFitsBytes2Double.cpp -o "CrabFitsBytes2Double_${Suffix_str}"
    fi
    cd "../"
fi





